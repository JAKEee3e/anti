local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Downloads = {}

-- Configuration for GitHub repository
local Config = {
    BaseURL = "https://raw.githubusercontent.com/JAKEee3e/anti/main/",
    Files = {
        {name = "gui", path = "gui.lua", version = "1.0.0"},
        {name = "Aimbot", path = "Aimbot.lua", version = "1.0.0"},
        {name = "esP", path = "ESP.lua", version = "1.0.0"},
        {name = "anti-flash", path = "Anti-flash.lua", version = "1.0.0"},
        {name = "radar", path = "Radar.lua", version = "1.0.0"},
        {name = "skeleton-esp", path = "Skeleton-ESP.lua", version = "1.0.0"}
    },
    RetryAttempts = 3,
    RetryDelay = 2,
    Debug = true,
    UseCache = false,
    Version = "1.0.0"
}

-- Cache storage
local ScriptCache = {}

-- Version management
function Downloads:SetVersion(version)
    Config.Version = version
end

-- Cache management
function Downloads:EnableCaching(enabled)
    Config.UseCache = enabled
end

function Downloads:ClearCache()
    ScriptCache = {}
end

-- Utility functions
local function debugPrint(...)
    if Config.Debug then
        print("[Loader]", ...)
    end
end

-- Safe HTTP request with retry
local function safeHttpGet(url, retries)
    retries = retries or Config.RetryAttempts
    local attempt = 0
    local success, result
    
    repeat
        attempt = attempt + 1
        success, result = pcall(function()
            return HttpService:GetAsync(url, Config.UseCache)
        end)
        if not success and attempt < retries then
            wait(Config.RetryDelay)
        end
    until success or attempt >= retries
    
    return success, result
end

-- Download function with caching
function Downloads:DownloadFile(fileInfo)
    if Config.UseCache and ScriptCache[fileInfo.name] then
        debugPrint("Using cached version of", fileInfo.name)
        return ScriptCache[fileInfo.name]
    end
    
    local success, content = safeHttpGet(Config.BaseURL .. fileInfo.path)
    
    if success then
        debugPrint("Successfully downloaded:", fileInfo.name)
        if Config.UseCache then
            ScriptCache[fileInfo.name] = content
        end
        return content
    end
    
    warn("Failed to download:", fileInfo.name)
    return nil
end

-- Script loading function with security checks
function Downloads:LoadScript(source, name)
    debugPrint("Loading script:", name)
    
    if type(source) ~= "string" or source:len() < 10 then
        warn("Invalid script content for:", name)
        return nil
    end
    
    local success, result = pcall(function()
        local fn = loadstring(source)
        if type(fn) == "function" then
            return fn()
        end
        return nil
    end)
    
    if success then
        debugPrint("Successfully loaded:", name)
        return result
    else
        warn("Failed to load script:", name, "Error:", result)
        return nil
    end
end

-- Initialize and run everything
function Downloads:Initialize()
    debugPrint("Starting initialization")
    
    -- Verify PlayerGui exists
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then
        warn("PlayerGui not found")
        return false
    end
    
    -- Create or get scripts folder
    local scriptsFolder = playerGui:FindFirstChild("LoadedScripts")
    if not scriptsFolder then
        scriptsFolder = Instance.new("Folder")
        scriptsFolder.Name = "LoadedScripts"
        scriptsFolder.Parent = playerGui
    end
    
    -- Download and load all files
    local loadedFiles = {}
    for _, fileInfo in ipairs(Config.Files) do
        local content = self:DownloadFile(fileInfo)
        if content then
            local result = self:LoadScript(content, fileInfo.name)
            if result then
                loadedFiles[fileInfo.name] = result
            else
                warn("Failed to load:", fileInfo.name)
                return false
            end
        else
            warn("Failed to download:", fileInfo.name)
            return false
        end
        wait(0.1) -- Prevent throttling
    end
    
    -- Store loaded scripts
    ScriptCache = loadedFiles
    
    debugPrint("Initialization complete!")
    return true
end

-- Function to get loaded scripts
function Downloads:GetLoadedScripts()
    return ScriptCache
end

return Downloads



